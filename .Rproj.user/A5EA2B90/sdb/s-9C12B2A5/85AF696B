{
    "contents" : "#' Determines of the indicated parent can possibly be the parent of the offspring\n#' \n#' This function takes a \\code{data.frame} full of parents and offspring\n#'  and checks to see if the offspring are actually assigned to a compatible\n#'  adult.\n#' @param df A \\code{data.frame} with identification and locus columns.\n#' @param AdultID The column header for id of the adults. All adults have unique\n#'  identification numbers and all offspring have the the same number as\n#'  the maternal/paternal indiviudal from which they were sampled or are being\n#'  compared.  Default = \"ID\"\n#' @param OffID A column indicating offspring identification numbers.  By default\n#'  all adults have OffID=0 (this is how I tell if they are really adults and not\n#'  offspring), and all offspring have OffID != 0. Default = \"OffID\"\n#' @param verbose Print out mismatched parent/offspring pairs.\n#' @return The \\code{data.frame} with a new column, Is.Parent with \n#'  values of TRUE/FALSE/NA (the NA is for adults).\n#' @export\nbad_parents <- function( df, AdultID=\"ID\", OffID=\"OffID\", verbose=FALSE) {\n  if( !length(column_class(df,\"locus\")) ) \n    stop(\"No need to try to identify bad parents when you do not have loci in the data\")\n  if( !(AdultID %in% names(df) ) )\n    stop(\"You need to have the AdultID actually in your data.frame for this function to work...\")\n  if( !(OffID %in% names(df) ) )\n    stop(\"You need to have the OffID actually in your data.frame for this function to work...\")\n  \n  if( !inherits(df[[OffID]], \"character\"))\n    df[[OffID]] <- as.character( df[[OffID]])\n  \n  df$Is.Parent <- NA\n  loci <- column_class(df,\"locus\")\n  for( i in 1:nrow(df) ) {\n    ind <- df[i,]\n    if( !is.na(ind[[AdultID]]) & ind[[OffID]] != \"0\" & !is.na(ind[[AdultID]])) {\n      mom <- df[ df[[AdultID]] == ind[[AdultID]] & df$OffID==\"0\",]\n      if( nrow(mom) > 0 ){\n        t <- transition_probability(ind,mom)\n        if( verbose &  t == 0 )\n          print(rbind(mom,ind))\n        df$Is.Parent[i] <- ( t>0 )\n      }\n    }\n  }\n  \n  return( df )\n}",
    "created" : 1391456085906.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3405140703",
    "id" : "85AF696B",
    "lastKnownWriteTime" : 1388929263,
    "path" : "~/Documents/Dropbox/R/gstudio/gstudio/R/bad_parents.R",
    "project_path" : "R/bad_parents.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}