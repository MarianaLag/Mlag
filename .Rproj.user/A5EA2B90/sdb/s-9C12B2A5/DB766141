{
    "contents" : "#' Estimates fractional paternity probability\n#'\n#' This function estimates fractional paternity for offspring\n#'  given a set of potential fathers.\n#' @param offspring A particular offspring. Often as a row\n#'  from a \\code{data.frame} with columns as loci and other \n#'  meta data.\n#' @param mother The assumed mother of the offspring as a row\n#'  from a \\code{data.frame} with columns as loci and other \n#'  meta data.\n#' @param fathers A \\code{data.frame} of potential fathers.\n#' @param ID The name of the column where the dad's adult ID column\n#'  is found in the \\code{data.frame} of potential fathers.\n#' @param OffID The name of the column where the offspring ID is \n#'  located.  All offspring from a maternal individual should have\n#'  have the same maternal \\code{ID} to indicate which mother they\n#'  are from but must also have a unique offspring ID.\n#' @return A \\code{data.frame} with indications of paternity by row.  Columns \n#'  will include ID, OffID, DadID, and potentially Fij.\n#' @export\n#' @author Rodney J. Dyer \\email{rjdyer@@vcu.edu}\n#' @examples\n#' freqs <- c(1/3,1/3,1/3)\n#' loci <- rep( paste(\"Loc\",1:6,sep=\"-\"), each=3)\n#' alleles <- LETTERS[1:3]\n#' f <- data.frame(Locus=loci, Allele=alleles, Frequency=freqs)\n#' f\n#' adults <- make_population(f,N=20)\n#' adults\n#' offs <- mate( adults[1,], adults[2,], N=10)\n#' offs$OffID <- offs$ID\n#' offs$MomID <- adults$ID[1]\n#' paternity( offs, adults[1,], adults )\npaternity <- function( offspring, mother, fathers, ID=\"ID\", OffID=\"OffID\"){\n\n  if( missing(offspring) | missing(mother) | missing(fathers) )\n    stop(\"you need to pass offspring, mother, and putative fathers to paternity()\")\n  \n  if( !(ID %in% names(offspring)) | !(ID %in% names(mother)) | !(ID %in% names(fathers)))\n    stop(\"You need to have an ID column in offspring, mother, and putative father data sets.\")\n  \n  \n  \n  locus_names <- column_class(offspring,\"locus\")\n  if( !(all( locus_names == column_class(mother,\"locus\"))))\n    stop(\"You need to have the same loci in both mother and offspring for paternity() to work.\")\n  if( !(all( locus_names == column_class(fathers,\"locus\"))))\n    stop(\"You need to have the same loci in both potential dads and offspring for paternity() to work.\")\n  \n  \n  K <- dim(offspring)[1]\n  N <- length(fathers[[ID]])\n  ret <- data.frame()\n  \n  # TODO iterate across offspring\n  for( off in 1:K) {\n    \n    oret <- data.frame(MomID=mother[[ID]], OffID=offspring[off,][[OffID]], DadID=fathers[[ID]],  Fij=0)\n    \n    for( i in 1:N) {\n      fij <- list()\n      \n      for( locus in locus_names){\n        o <- offspring[off,][[locus]]\n        m <-mother[[locus]]\n        f <- fathers[i,][[locus]]\n        \n        if( !is.na(o) & !is.na(m) & !is.na(f) ) \n          fij[[locus]] <- transition_probability(o,m,f)\n\n      }\n      oret$Fij[i] <- prod(as.numeric(fij))\n    }\n    if( sum(oret$Fij)>0)\n      oret$Fij <- oret$Fij/ sum( oret$Fij )\n    oret <- oret[ oret$Fij>0 , ]\n    if( dim(oret)[1]>0)\n      ret <- rbind( ret, oret )\n  }\n  ret <- ret[ order( ret[,1], ret[,2], -ret[,4]),]\n  rownames(ret) <- 1:length(rownames(ret))\n  \n  return(ret)\n}\n\n",
    "created" : 1391456096855.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1939234297",
    "id" : "DB766141",
    "lastKnownWriteTime" : 1386769973,
    "path" : "~/Documents/Dropbox/R/gstudio/gstudio/R/paternity.R",
    "project_path" : "R/paternity.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}